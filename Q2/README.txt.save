#I'll create a complete scenario with a Dockerized Nginx web server
#and walk through troubleshooting a "host not found" issue similar to my internal dashboard problem.
Step 1: Create the Dockerized Nginx Environment
 	#Create a simple Dockerfile
 	#Create a sample index.html
 	#Build and run the container
 	docker build -t internal-dashboard .
 	docker run -d --name dashboard -p 8080:80 internal-dashboard
Step 2: Simulate the DNS Issue
	# First, verify it works normally
	curl -H "Host: internal.example.com" http://localhost:8585

	Now break the DNS resolution by messing with the host's DNS config
	sudo mv /etc/resolv.conf /etc/resolv.conf.backup
	echo "nameserver 127.0.0.1" | sudo tee /etc/resolv.conf
Step 3: Troubleshooting Steps
	# Check resolution attempts
	dig internal.example.com
	# Should fail with "connection refused"

	# Check against known good DNS
	dig @8.8.8.8 internal.example.com
	# Should return NOERROR but may not have our test record
	
	2. Verify Service Reachability
	# Get the container IP
	CONTAINER_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' dashboard)

	# Check direct access to the service
	curl -v http://$CONTAINER_IP

	# Check port connectivity
	telnet $CONTAINER_IP 80
	# Or with netcat
	nc -zv $CONTAINER_IP 80
	3. Identify Possible Causes

Based on our simulation, the potential causes are:

    Local DNS resolver misconfigured (/etc/resolv.conf)

    DNS server unresponsive (we pointed to localhost)

    Application running but not properly registered in DNS
4. Apply Fixes

Fix DNS Resolution:
	# Restore original resolv.conf
sudo mv /etc/resolv.conf.backup /etc/resolv.conf

# Alternative: Add to /etc/hosts for testing
echo "$CONTAINER_IP internal.example.com" | sudo tee -a /etc/hosts
Verify Fix:
# Now DNS should work
ping -c 1 internal.example.com

# Web request should work
curl http://internal.example.com:8080/
Step 4: Create Complete Test Script

