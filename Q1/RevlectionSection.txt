Reflective Section
1. How the script handles arguments and options

    It first checks for --help.

    Then uses getopts to parse -n and -v.

    After options are handled, it expects exactly two arguments: the search string and filename.

    It checks if the file exists.

    It reads the file line-by-line, matching case-insensitively.

    Based on -v and -n, it prints the correct output format.

2. If supporting regex, -i, -c, or -l

    For regex: use full grep -E internally instead of just grep -F.

    For -i: Case insensitivity already exists here, but could be more cleanly integrated using flags inside grep.

    For -c (count matches): add a counter and print the number of matches instead of lines.

    For -l (list file name if match found): detect the first match, print the filename once, and exit early.

I would redesign the structure so options are stored in variables (like case_insensitive=true) and build a dynamic grep command internally (e.g., grep_options="" then adding -i, -c, etc.).

3. Hardest part

  The hardest part was handling inverted match (-v) cleanly while preserving case-insensitive searching.
  Because simple bash conditions don't behave well when flipping logic (! true isn't directly valid inside [[ ]]), special care was needed when deciding what to     print.